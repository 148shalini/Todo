{"ast":null,"code":"var _jsxFileName = \"D:\\\\reacttutorial\\\\todo\\\\src\\\\advanceHooks\\\\advanceHooks.jsx\",\n  _s = $RefreshSig$();\n// import React, {  useMemo, useState} from 'react';\n// import Buttons from './buttons';\n\n// const AdvanceHooks = () => {\n\n//     const [count, setCount] = useState(0);\n//     const numbers =  useMemo(()=>Array.from({ length: 100_000_000 }, (_, i) => i + 1),[]);\n//     const decrement=() => {\n//         setCount(count-1);\n//     }\n// const increment = () => {\n//         setCount(count+1);\n//         findElement();\n//     }\n//     const findElement = () => {\n\n//                     const target = 99999999;\n//                     // Use indexOf to find the element\n//                     const index = numbers.indexOf(target);\n\n//                     if (index !== -1) {\n//                       console.log(`Element ${target} found at index ${index}`);\n//                     } else {\n//                       console.log(`Element ${target} not found`);\n//                     }\n//                   }\n// // Create array from 1 to 100,000,000\n\n//   return (\n//     <div>\n//       <h1>Count: {count}</h1>\n//       {/* <Buttons /> */}\n//       <button onClick={increment}>Increment</button>\n//       <button onClick={decrement}>Decrement</button>\n//     </div>\n//   )\n// }\n\n// export default AdvanceHooks\n\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdvanceHooks = () => {\n  _s();\n  const [count, setCount] = useState(0);\n\n  // Create array from 1 to 100,000,000 only once\n  const numbers = useMemo(() => {\n    console.log(\"Creating big array...\");\n    return Array.from({\n      length: 100000000\n    }, (_, i) => i + 1);\n  }, []);\n\n  // ✅ Move this above increment\n  const findElement = useCallback(() => {\n    const target = 99999999;\n    const index = numbers.indexOf(target);\n    if (index !== -1) {\n      console.log(`Element ${target} found at index ${index}`);\n    } else {\n      console.log(`Element ${target} not found`);\n    }\n  }, [numbers]);\n  const increment = useCallback(() => {\n    setCount(prev => prev + 1);\n    findElement();\n  }, [findElement]);\n  const decrement = () => {\n    setCount(prev => prev - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Count: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: increment,\n      children: \"Increment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: decrement,\n      children: \"Decrement\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(AdvanceHooks, \"hQoE5L3J256+ixzqR3iAGIqI4nk=\");\n_c = AdvanceHooks;\nexport default AdvanceHooks;\nvar _c;\n$RefreshReg$(_c, \"AdvanceHooks\");","map":{"version":3,"names":["React","useCallback","useMemo","useState","jsxDEV","_jsxDEV","AdvanceHooks","_s","count","setCount","numbers","console","log","Array","from","length","_","i","findElement","target","index","indexOf","increment","prev","decrement","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/reacttutorial/todo/src/advanceHooks/advanceHooks.jsx"],"sourcesContent":["// import React, {  useMemo, useState} from 'react';\r\n// import Buttons from './buttons';\r\n\r\n// const AdvanceHooks = () => {\r\n\r\n//     const [count, setCount] = useState(0);\r\n//     const numbers =  useMemo(()=>Array.from({ length: 100_000_000 }, (_, i) => i + 1),[]);\r\n//     const decrement=() => {\r\n//         setCount(count-1);\r\n//     }\r\n// const increment = () => {\r\n//         setCount(count+1);\r\n//         findElement();\r\n//     }\r\n//     const findElement = () => {\r\n    \r\n//                     const target = 99999999;\r\n//                     // Use indexOf to find the element\r\n//                     const index = numbers.indexOf(target);\r\n                  \r\n//                     if (index !== -1) {\r\n//                       console.log(`Element ${target} found at index ${index}`);\r\n//                     } else {\r\n//                       console.log(`Element ${target} not found`);\r\n//                     }\r\n//                   }\r\n// // Create array from 1 to 100,000,000\r\n\r\n    \r\n//   return (\r\n//     <div>\r\n//       <h1>Count: {count}</h1>\r\n//       {/* <Buttons /> */}\r\n//       <button onClick={increment}>Increment</button>\r\n//       <button onClick={decrement}>Decrement</button>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// export default AdvanceHooks\r\n\r\nimport React, { useCallback, useMemo, useState } from 'react';\r\n\r\nconst AdvanceHooks = () => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  // Create array from 1 to 100,000,000 only once\r\n  const numbers = useMemo(() => {\r\n    console.log(\"Creating big array...\");\r\n    return Array.from({ length: 100_000_000 }, (_, i) => i + 1);\r\n  }, []);\r\n\r\n  // ✅ Move this above increment\r\n  const findElement = useCallback(() => {\r\n    const target = 99999999;\r\n    const index = numbers.indexOf(target);\r\n\r\n    if (index !== -1) {\r\n      console.log(`Element ${target} found at index ${index}`);\r\n    } else {\r\n      console.log(`Element ${target} not found`);\r\n    }\r\n  }, [numbers]);\r\n\r\n  const increment = useCallback(() => {\r\n    setCount((prev) => prev + 1);\r\n    findElement();\r\n  }, [findElement]);\r\n\r\n  const decrement = () => {\r\n    setCount((prev) => prev - 1);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Count: {count}</h1>\r\n      <button onClick={increment}>Increment</button>\r\n      <button onClick={decrement}>Decrement</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdvanceHooks;\r\n"],"mappings":";;AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;;EAErC;EACA,MAAMO,OAAO,GAAGR,OAAO,CAAC,MAAM;IAC5BS,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpC,OAAOC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAY,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,GAAG,CAAC,CAAC;EAC7D,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,WAAW,GAAGjB,WAAW,CAAC,MAAM;IACpC,MAAMkB,MAAM,GAAG,QAAQ;IACvB,MAAMC,KAAK,GAAGV,OAAO,CAACW,OAAO,CAACF,MAAM,CAAC;IAErC,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;MAChBT,OAAO,CAACC,GAAG,CAAC,WAAWO,MAAM,mBAAmBC,KAAK,EAAE,CAAC;IAC1D,CAAC,MAAM;MACLT,OAAO,CAACC,GAAG,CAAC,WAAWO,MAAM,YAAY,CAAC;IAC5C;EACF,CAAC,EAAE,CAACT,OAAO,CAAC,CAAC;EAEb,MAAMY,SAAS,GAAGrB,WAAW,CAAC,MAAM;IAClCQ,QAAQ,CAAEc,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;IAC5BL,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,MAAMM,SAAS,GAAGA,CAAA,KAAM;IACtBf,QAAQ,CAAEc,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;EAC9B,CAAC;EAED,oBACElB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,GAAI,SAAO,EAACjB,KAAK;IAAA;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACvBxB,OAAA;MAAQyB,OAAO,EAAER,SAAU;MAAAG,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC9CxB,OAAA;MAAQyB,OAAO,EAAEN,SAAU;MAAAC,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV,CAAC;AAACtB,EAAA,CArCID,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAuClB,eAAeA,YAAY;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}